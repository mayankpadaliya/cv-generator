{"ast":null,"code":"const formatDate = date => {\n  return `${date.year}-${String(date.month).padStart(2, '0')}`;\n};\nexport const importLinkedInData = data => {\n  return {\n    personalInfo: {\n      firstName: data.profile.firstName,\n      lastName: data.profile.lastName,\n      email: data.profile.email,\n      phone: data.profile.phoneNumbers[0] || '',\n      location: `${data.profile.location.city}, ${data.profile.location.country}`,\n      linkedIn: data.profile.publicProfileUrl,\n      website: ''\n    },\n    education: data.education.map(edu => ({\n      institution: edu.schoolName,\n      degree: edu.degreeName,\n      field: edu.fieldOfStudy,\n      startDate: formatDate(edu.startDate),\n      endDate: edu.endDate ? formatDate(edu.endDate) : '',\n      description: edu.description || ''\n    })),\n    experience: data.positions.map(pos => ({\n      company: pos.companyName,\n      position: pos.title,\n      startDate: formatDate(pos.startDate),\n      endDate: pos.endDate ? formatDate(pos.endDate) : '',\n      description: pos.description || '',\n      achievements: []\n    })),\n    skills: data.skills.map(skill => skill.name),\n    certifications: data.certifications.map(cert => ({\n      name: cert.name,\n      issuer: cert.authority,\n      date: formatDate(cert.timePeriod.startDate),\n      url: cert.url || ''\n    }))\n  };\n};\nexport const importJSONData = async file => {\n  try {\n    const text = await file.text();\n    const data = JSON.parse(text);\n\n    // Check if this is LinkedIn data\n    if (data.profile && data.positions) {\n      return importLinkedInData(data);\n    }\n\n    // If it's already in our CV format, validate and return\n    if (data.personalInfo && data.education && data.experience) {\n      return data;\n    }\n    throw new Error('Invalid JSON format. Please provide either LinkedIn data export or CV data in the correct format.');\n  } catch (error) {\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error('An unknown error occurred while parsing the JSON file');\n  }\n};","map":{"version":3,"names":["formatDate","date","year","String","month","padStart","importLinkedInData","data","personalInfo","firstName","profile","lastName","email","phone","phoneNumbers","location","city","country","linkedIn","publicProfileUrl","website","education","map","edu","institution","schoolName","degree","degreeName","field","fieldOfStudy","startDate","endDate","description","experience","positions","pos","company","companyName","position","title","achievements","skills","skill","name","certifications","cert","issuer","authority","timePeriod","url","importJSONData","file","text","JSON","parse","Error","error"],"sources":["D:/Mayank Study Thing/100X/02 LLM Module/Cursor/New project - 2/src/utils/importData.ts"],"sourcesContent":["import { CVData } from '../types/cv';\r\n\r\ninterface LinkedInData {\r\n  profile: {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    phoneNumbers: string[];\r\n    location: {\r\n      country: string;\r\n      city: string;\r\n    };\r\n    publicProfileUrl: string;\r\n  };\r\n  positions: Array<{\r\n    companyName: string;\r\n    title: string;\r\n    startDate: {\r\n      year: number;\r\n      month: number;\r\n    };\r\n    endDate?: {\r\n      year: number;\r\n      month: number;\r\n    };\r\n    description?: string;\r\n  }>;\r\n  education: Array<{\r\n    schoolName: string;\r\n    degreeName: string;\r\n    fieldOfStudy: string;\r\n    startDate: {\r\n      year: number;\r\n      month: number;\r\n    };\r\n    endDate?: {\r\n      year: number;\r\n      month: number;\r\n    };\r\n    description?: string;\r\n  }>;\r\n  skills: Array<{\r\n    name: string;\r\n  }>;\r\n  certifications: Array<{\r\n    name: string;\r\n    authority: string;\r\n    timePeriod: {\r\n      startDate: {\r\n        year: number;\r\n        month: number;\r\n      };\r\n    };\r\n    url?: string;\r\n  }>;\r\n}\r\n\r\nconst formatDate = (date: { year: number; month: number }): string => {\r\n  return `${date.year}-${String(date.month).padStart(2, '0')}`;\r\n};\r\n\r\nexport const importLinkedInData = (data: LinkedInData): CVData => {\r\n  return {\r\n    personalInfo: {\r\n      firstName: data.profile.firstName,\r\n      lastName: data.profile.lastName,\r\n      email: data.profile.email,\r\n      phone: data.profile.phoneNumbers[0] || '',\r\n      location: `${data.profile.location.city}, ${data.profile.location.country}`,\r\n      linkedIn: data.profile.publicProfileUrl,\r\n      website: '',\r\n    },\r\n    education: data.education.map((edu) => ({\r\n      institution: edu.schoolName,\r\n      degree: edu.degreeName,\r\n      field: edu.fieldOfStudy,\r\n      startDate: formatDate(edu.startDate),\r\n      endDate: edu.endDate ? formatDate(edu.endDate) : '',\r\n      description: edu.description || '',\r\n    })),\r\n    experience: data.positions.map((pos) => ({\r\n      company: pos.companyName,\r\n      position: pos.title,\r\n      startDate: formatDate(pos.startDate),\r\n      endDate: pos.endDate ? formatDate(pos.endDate) : '',\r\n      description: pos.description || '',\r\n      achievements: [],\r\n    })),\r\n    skills: data.skills.map((skill) => skill.name),\r\n    certifications: data.certifications.map((cert) => ({\r\n      name: cert.name,\r\n      issuer: cert.authority,\r\n      date: formatDate(cert.timePeriod.startDate),\r\n      url: cert.url || '',\r\n    })),\r\n  };\r\n};\r\n\r\nexport const importJSONData = async (file: File): Promise<CVData> => {\r\n  try {\r\n    const text = await file.text();\r\n    const data = JSON.parse(text);\r\n    \r\n    // Check if this is LinkedIn data\r\n    if (data.profile && data.positions) {\r\n      return importLinkedInData(data as LinkedInData);\r\n    }\r\n    \r\n    // If it's already in our CV format, validate and return\r\n    if (data.personalInfo && data.education && data.experience) {\r\n      return data as CVData;\r\n    }\r\n    \r\n    throw new Error('Invalid JSON format. Please provide either LinkedIn data export or CV data in the correct format.');\r\n  } catch (error: unknown) {\r\n    if (error instanceof Error) {\r\n      throw error;\r\n    }\r\n    throw new Error('An unknown error occurred while parsing the JSON file');\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}